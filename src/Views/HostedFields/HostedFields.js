import React, { Component } from "react";
// import axios from 'axios';
import api from '../../services/api';
import Install from './Install';
import Product from './Product';
import ClientSide from './ClientSide';
// import ServerSide from './ServerSide';

import loadingGif from '../../assets/loading.gif';
import './Vault.css';
import ServerSide from "./ServerSide";
import Transaction from "./Transaction";
// import uuid from 'react-uuid';




// Panel
// import 'https://js.braintreegateway.com/web/3.58.0/js/client.min.js';
// import 'https://www.paypalobjects.com/api/checkout.js';
// import 'https://js.braintreegateway.com/web/3.57.0/js/paypal-checkout.min.js';


class HostedFields extends Component {
  componentDidMount() {
    this.setUserProfile();
    this.checkPayPalVault();
    // this.getClientToken();
    this.createPaymentsDisplay();
  }


  state = {
    language: 'Node',
    loading: true,
    vault: false,
    ccVault: false,
    transaction: false,
    // paypalVaultTokenization: false,
    amount: 50,
    userEmail: 'email@email.com',
    loadingDivHeigth: 200
    // paypalVaultTokenizationToken: "",
    // clientAuthorizationResponse: 'Waiting...'
  }
  expandDiv = () => {
    // alert('asdf');
    // loadingDivHeigth
    // this.setState({ loadingDivHeigth: 400 })
  }
  setUserProfile = () => {
    if (localStorage.getItem("user")) {
      console.log(localStorage.getItem("user"));
    } else {
      let id = Math.random().toString(36).substr(2, 15);
      let user = "user_" + id + "@test.com"
      localStorage.setItem("user", user);
      console.log("User created");
      console.log(user);
    }
  }

  checkPayPalVault = () => {
    // const token = localStorage.getItem('vaultPayPalToken');
    if (localStorage.getItem('vaultCCToken')) {
      console.log('PayPal vaulted')
      // this.setState({ paypalVaultTokenization: true })
      this.setState({ ccVault: true });
      this.setState({ userEmail: localStorage.getItem('vaultCCNumberData') });

    } else {
      console.log('PayPal not vaulted');
    }

  }


  getClientToken = async () => {
    console.log('getClientToken');
    // const CLIENT_AUTHORIZATION = await axios.get('http://localhost:3333/get-client-token');
    const CLIENT_AUTHORIZATION = await api.get('get-client-token');
    console.log('CLIENT_AUTHORIZATION.data');
    console.log(CLIENT_AUTHORIZATION.data);
    // this.setState({ clientAuthorizationResponse: CLIENT_AUTHORIZATION.data })

    const newoutput = JSON.stringify(CLIENT_AUTHORIZATION.data, null, '\t');

    // document.getElementById("CreatePaymentJsonResponseOutput").innerHTML = output;
    document.getElementById("installTextAreaJsonResponse").value = newoutput;

    this.setState({ loading: false });

    return CLIENT_AUTHORIZATION.data.clientToken;
  }
  cancelVault = () => {
    localStorage.removeItem('vaultPayPalToken');

    this.setState({ vault: false });
    this.setState({ loading: false });
  }

  createPaymentsDisplay = async () => {
    const CLIENT_AUTHORIZATION = await this.getClientToken();


    var form = document.querySelector('#hosted-fields-form');
    var submit = document.querySelector('input[type="submit"]');

    window.braintree.client.create({
      // Insert your tokenization key here
      authorization: CLIENT_AUTHORIZATION
    }, function (clientErr, clientInstance) {
      if (clientErr) {
        console.error(clientErr);
        return;
      }

      // Create a hostedFields component to initialize the form

      window.braintree.hostedFields.create({
        client: clientInstance,
        // Customize the Hosted Fields.
        // More information can be found at:
        // https://developers.braintreepayments.com/guides/hosted-fields/styling/javascript/v3
        styles: {
          'input': {
            'font-size': '14px',
            'color': 'pink'
          },
          'input.invalid': {
            'color': 'red'
          },
          'input.valid': {
            'color': 'green'
          }
        },
        // Configure which fields in your card form will be generated by Hosted Fields instead
        fields: {
          number: {
            selector: '#card-number',
            placeholder: '4111 1111 1111 1111'
          },
          cvv: {
            selector: '#cvv',
            placeholder: '123'
          },
          expirationDate: {
            selector: '#expiration-date',
            placeholder: '10/2022'
          }
        }
      }, function (hostedFieldsErr, instance) {
        if (hostedFieldsErr) {
          console.error(hostedFieldsErr);
          return;
        }

        // Once the fields are initialized enable the submit button
        submit.removeAttribute('disabled');

        // Initialize the form submit event
        form.addEventListener('submit', function (event) {
          event.preventDefault();
          // When the user clicks on the 'Submit payment' button this code will send the
          // encrypted payment information in a variable called a payment method nonce
          instance.tokenize(function (tokenizeErr, payload) {
            if (tokenizeErr) {
              console.error(tokenizeErr);
              return;
            }
            const $ = window.$;
            instance.requestPaymentMethod(function (requestPaymentMethodErr, payload) {
              $.ajax({
                type: 'POST',
                url: '/checkout',
                data: { 'paymentMethodNonce': payload.nonce }
              }).done(function (result) {
                // Tear down the Hosted Fields form
                instance.teardown(function (teardownErr) {
                  if (teardownErr) {
                    console.error('Could not tear down the Hosted Fields form!');
                  } else {
                    console.info('Hosted Fields form has been torn down!');
                    // Remove the 'Submit payment' button
                    $('#hosted-fields-form').remove();
                  }
                });

                if (result.success) {
                  $('#checkout-message').html('<h1>Success</h1><p>Your Hosted Fields form is working! Check your <a href="https://sandbox.braintreegateway.com/login">sandbox Control Panel</a> for your test transactions.</p><p>Refresh to try another transaction.</p>');
                } else {
                  $('#checkout-message').html('<h1>Error</h1><p>Check your console.</p>');
                }
              });
            });
          });
        }, false);
      });
    });



    //
  }
  createTransaction = async (payload) => {
    const payment = await api.post('create-payment', {
      amount: 30,
      nonce: payload.nonce
    });
    console.log('payment');
    console.log(payment);

    const newoutput = JSON.stringify(payment.data, null, '\t');
    document.getElementById("serversideTextAreaJsonResponse").value = newoutput;

    this.setState({ transaction: true })

    return payment;
  }

  createCCVault = async (payload) => {
    const vault = await api.post('create-customer', {
      amount: 30,
      nonce: payload.nonce
    });
    console.log('vault');
    console.log(vault);

    const newoutput = JSON.stringify(vault.data, null, '\t');
    document.getElementById("serversideTextAreaJsonResponse").value = newoutput;

    this.setState({ vault: true });
    this.setState({ userEmail: vault.data.customer.creditCards[0].email });
    console.log('data.customer.paymentMethods[0].token');
    console.log(vault.data.customer.paymentMethods[0].token);

    localStorage.setItem('vaultCCToken', vault.data.customer.paymentMethods[0].token);
    localStorage.setItem('vaultCCNumberData', vault.data.customer.creditCards[0].email);

    return vault;
  }


  createVaultTransaction = async () => {
    const token = localStorage.getItem('vaultPayPalToken');
    console.log('createVaultTransaction');
    console.log(this.state.amount);
    // const amount = { this.state.amount };
    // const customerId = localStorage.getItem('customerId');
    const payment = await api.post('create-vault-transaction', {
      amount: this.state.amount,
      // token: '7nd3dr2'
      token: token
    });
    console.log('payment');
    console.log(payment);

    const newoutput = JSON.stringify(payment.data, null, '\t');
    document.getElementById("transactionTextAreaJsonResponse").value = newoutput;

    this.setState({ transaction: true })

    return payment;
  }


  render() {
    return (
      <>
        {/* // {this.state.language} */}
        {/*
            // Be sure to have PayPal's checkout.js library loaded on your page.
            // <script src="https://www.paypalobjects.com/api/checkout.js" data-version-4></script>
          */}
        <div className="container" style={{ minHeight: 200 }}>
          <div className="row">
            <div className="col text-center">




              {this.state.loading
                ?
                <img src={loadingGif} alt="Loading" width='25px' />
                // <div></div>
                : [
                  <div className="container" >
                    <div className="row">
                      <div className="col text-center">

                        <form action="/checkout" id="hosted-fields-form" method="post">
                          <label htmlFor="card-number">Card Number</label>
                          <div id="card-number"></div>

                          <label htmlFor="cvv">CVV</label>
                          <div id="cvv"></div>

                          <label htmlFor="expiration-date">Expiration Date</label>
                          <div id="expiration-date"></div>

                          <div id="checkout-message"></div>

                          <input type="submit" value="Pay" disabled />
                        </form>



                      </div>
                    </div>
                  </div>

                ]
              }






            </div>
          </div>
        </div>

        <br />



        <div className="container" id="mainDiv">

          <div className="row">
            <div className="col">

              <div className="row">
                <div className="col-2">
                  <div className="nav flex-column nav-pills" id="v-pills-tab" role="tablist" aria-orientation="vertical">
                    <a className="nav-link active" id="v-pills-product-tab" data-toggle="pill" href="#v-pills-product" role="tab" aria-controls="v-pills-product" aria-selected="true">Product</a>
                    <a className="nav-link" id="v-pills-install-tab" data-toggle="pill" href="#v-pills-install" role="tab" aria-controls="v-pills-install" aria-selected="false">
                      Install
                      <span className='float-right'>&#10004;</span>
                      {/* <span className='float-right'>&#x2713;</span> */}
                      {/* <span className='float-right'>&#10003;</span> */}
                      {/* <span className='float-right'>&#9745;</span> */}
                    </a>
                    <a className="nav-link" id="v-pills-clientside-tab" data-toggle="pill" href="#v-pills-clientside" role="tab" aria-controls="v-pills-clientside" aria-selected="false">
                      Client-Side
                      <span className='float-right'>&#10004;</span>
                    </a>
                    <a className="nav-link" id="v-pills-serverside-tab" data-toggle="pill" href="#v-pills-serverside" role="tab" aria-controls="v-pills-serverside" aria-selected="false">
                      Server-Side
                      {this.state.vault &&
                        <span className='float-right'>&#10004;</span>
                      }

                    </a>
                    <a className="nav-link" id="v-pills-transaction-tab" data-toggle="pill" href="#v-pills-transaction" role="tab" aria-controls="v-pills-transaction" aria-selected="false">
                      Transaction
                      {this.state.transaction &&
                        <span className='float-right'>&#10004;</span>
                      }
                    </a>

                    <select className="nav-link" id="v-pills-language-tab" data-toggle="pill" href="#v-pills-language" role="tab" aria-controls="v-pills-language" aria-selected="false"
                      onChange={e => this.setState({ language: e.target.value })}
                    >
                      <option value="Node">Node.js</option>
                      <option value="PHP">PHP</option>
                      {/* always configure clientside.js when a new language option is inserted */}
                      {/* <option value="Python">Python</option> */}
                    </select>
                  </div>
                </div>
                <div className="col-10">
                  <div className="tab-content" id="v-pills-tabContent">



                    <div className="tab-pane fade show active" id="v-pills-product" role="tabpanel" aria-labelledby="v-pills-product-tab">
                      <Product product={'PayPal Checkout'} />
                    </div>

                    <div className="tab-pane fade" id="v-pills-install" role="tabpanel" aria-labelledby="v-pills-install-tab">
                      <Install product={'profile'} language={this.state.language} response={this.state.clientAuthorizationResponse} />
                    </div>

                    <div className="tab-pane fade" id="v-pills-clientside" role="tabpanel" aria-labelledby="v-pills-clientside-tab">
                      <ClientSide product={'profile'} language={this.state.language} response={this.state.clientAuthorizationResponse} />
                    </div>

                    <div className="tab-pane fade" id="v-pills-serverside" role="tabpanel" aria-labelledby="v-pills-serverside-tab">
                      <ServerSide product={'profile'} language={this.state.language} response={this.state.clientAuthorizationResponse} />
                    </div>

                    <div className="tab-pane fade" id="v-pills-transaction" role="tabpanel" aria-labelledby="v-pills-transaction-tab">
                      <Transaction product={'profile'} language={this.state.language} response={this.state.clientAuthorizationResponse} />
                    </div>

                  </div>
                </div>
              </div>


            </div>
          </div>
        </div>


        <style>
          *{
            'background-color:red'
          }
        </style>




      </>
    );
  }
}
export default HostedFields;
